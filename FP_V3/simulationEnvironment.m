% function [allData, scenario, sensor] = simulationEnvironment()
% %simulationEnvironment - Returns sensor detections
% %    allData = simulationEnvironment returns sensor detections in a structure
% %    with time for an internally defined scenario and sensor suite.
% %
% %    [allData, scenario, sensors] = simulationEnvironment optionally returns
% %    the drivingScenario and detection generator objects.
% 
% % Generated by MATLAB(R) 23.2 (R2023b) and Automated Driving Toolbox 23.2 (R2023b).
% % Generated on: 19-Sep-2024 10:39:12
% 
% % Create the drivingScenario object and ego car
% [scenario, egoVehicle] = createDrivingScenario;
% 
% % Create all the sensors
% sensor = createSensor(scenario);
% 
% allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
% running = true;
% while running
% 
%     % Generate the target poses of all actors relative to the ego vehicle
%     poses = targetPoses(egoVehicle);
%     time  = scenario.SimulationTime;
% 
%     % Generate detections for the sensor
%     laneDetections = [];
%     ptClouds = [];
%     insMeas = [];
%     [objectDetections, isValidTime] = sensor(poses, time);
%     numObjects = length(objectDetections);
%     objectDetections = objectDetections(1:numObjects);
% 
%     % Aggregate all detections into a structure for later use
%     if isValidTime
%         allData(end + 1) = struct( ...
%             'Time',       scenario.SimulationTime, ...
%             'ActorPoses', actorPoses(scenario), ...
%             'ObjectDetections', {objectDetections}, ...
%             'LaneDetections', {laneDetections}, ...
%             'PointClouds',   {ptClouds}, ... %#ok<AGROW>
%             'INSMeasurements',   {insMeas}); %#ok<AGROW>
%     end
% 
%     % Advance the scenario one time step and exit the loop if the scenario is complete
%     running = advance(scenario);
% end
% 
% % Restart the driving scenario to return the actors to their initial positions.
% restart(scenario);
% 
% % Release the sensor object so it can be used again.
% release(sensor);
% 
% %%%%%%%%%%%%%%%%%%%%
% % Helper functions %
% %%%%%%%%%%%%%%%%%%%%
% 
% % Units used in createSensors and createDrivingScenario
% % Distance/Position - meters
% % Speed             - meters/second
% % Angles            - degrees
% % RCS Pattern       - dBsm
% 
% function sensor = createSensor(scenario)
% % createSensors Returns all sensor objects to generate detections
% 
% % Assign into each sensor the physical and radar profiles for all actors
% profiles = actorProfiles(scenario);
% sensor = drivingRadarDataGenerator('SensorIndex', 1, ...
%     'UpdateRate', 25, ...
%     'MountingLocation', [3.7 0 0.2], ...
%     'RangeLimits', [0 100], ...
%     'TargetReportFormat', 'Detections', ...
%     'HasFalseAlarms', false, ...
%     'FieldOfView', [30 5], ...
%     'Profiles', profiles);
% 
% function [scenario, egoVehicle] = createDrivingScenario
% % createDrivingScenario Returns the drivingScenario defined in the Designer
% 
% % Construct a drivingScenario object.
% scenario = drivingScenario;
% 
% % Add all road segments
% roadCenters = [49.89 -0.08 0;
%     -64.9 -0.5 0];
% marking = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
%     laneMarking('Dashed')
%     laneMarking('DoubleSolid')];
% laneSpecification = lanespec(2, 'Width', 4.925, 'Marking', marking);
% road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');
% 
% roadCenters = [47.06 28.01 0;
%     46.95 -27.96 0];
% road(scenario, roadCenters, 'Name', 'Road1');
% 
% % Add the actors
% truck = vehicle(scenario, ...
%     'ClassID', 1, ...
%     'Position', [-14.4028237455621 -1.58396004110509 0.01], ...
%     'Mesh', driving.scenario.carMesh, ...
%     'PlotColor', [0.85 0.325 0.098], ...
%     'Name', 'Truck');
% waypoints = [-14.4528237455621 -2.79396004110509 0.01;
%     3.8 -0.8 0;
%     15.88 1.51 0.01;
%     30.11 2.64 0.01;
%     43.94 2.71 0.01];
% speed = [30;30;30;30;30];
% yaw =  [0;NaN;NaN;NaN;NaN];
% smoothTrajectory(truck, waypoints, speed, 'Yaw', yaw);
% 
% % Add the ego vehicle
% egoVehicle = vehicle(scenario, ...
%     'ClassID', 1, ...
%     'Position', [-54.6127392688596 2.5 0], ...
%     'Mesh', driving.scenario.carMesh, ...
%     'PlotColor', [0.929 0.694 0.125], ...
%     'Name', 'Car');
% waypoints = [-54.6127392688596 2.5 0;
%     -27.72 2.5 0;
%     -15.91 2.5 0;
%     -0.23 2.5 0;
%     47.7 2.5 0];
% speed = [40;40;40;40;40];
% waittime = [0;0;0;0;0];
% trajectory(egoVehicle, waypoints, speed, waittime);
% 







function [allData, scenario, sensors] = simulationEnvironment()
%simulationEnvironment - Returns sensor detections
%    allData = simulationEnvironment returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = simulationEnvironment optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 23.2 (R2023b) and Automated Driving Toolbox 23.2 (R2023b).
% Generated on: 19-Sep-2024 11:32:43

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            if isa(sensor,'ultrasonicDetectionGenerator')
                [objectDets, isValidTime(sensorIndex)] = sensor(poses, time);
                numObjects = length(objectDets);
            else
                [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            end
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'UpdateRate', 25, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'HasFalseAlarms', false, ...
    'FieldOfView', [30 5], ...
    'Profiles', profiles);
sensors{2} = lidarPointCloudGenerator('SensorIndex', 2, ...
    'UpdateInterval', 0.04, ...
    'SensorLocation', [1.5 0], ...
    'MaxRange', 100, ...
    'EgoVehicleActorID', 2, ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'UpdateInterval', 0.05, ...
    'SensorLocation', [1.9 0], ...
    'HasNoise', false, ...
    'DetectorOutput', 'Lanes and objects', ...
    'ActorProfiles', profiles);
numSensors = 3;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [150.6 0.4 0;
    43.2 -73.2 0;
    -64.9 -0.5 0];
marking = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')
    laneMarking('DoubleSolid')];
laneSpecification = lanespec(2, 'Width', 4.925, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

% Add the actors
truck = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-43.9628237455621 -29.0239600411051 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Truck');
waypoints = [-43.9628237455621 -29.0239600411051 0.01;
    -15.2 -48.7 0;
    5.9 -65.7 0;
    26.1 -69.2 0;
    49.5 -75.4 0;
    79.6 -62.5 0;
    106.2 -51.1 0;
    118.4 -32.5 0;
    130.9 -25.5 0];
speed = [40;40;40;40;40;40;40;40;40];
smoothTrajectory(truck, waypoints, speed);

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-61.2427392688596 -0.84 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Car');
waypoints = [-61.2427392688596 -0.84 0.01;
    -45.38 -21.17 0.01;
    -36.1 -30.5 0;
    -21.7 -43.4 0;
    -7.2 -54.7 0;
    8 -63.4 0;
    21.7 -68.2 0;
    37.7 -71.2 0;
    55.3 -70 0;
    83 -60.8 0;
    101.7 -48.2 0;
    112.4 -39.3 0;
    125.8 -25.7 0];
speed = [40;40;40;40;40;40;40;40;40;40;40;40;40];
smoothTrajectory(egoVehicle, waypoints, speed);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end


