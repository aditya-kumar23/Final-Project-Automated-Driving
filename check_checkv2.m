function [allData, scenario, sensors] = check_checkv2()
%check_checkv2 - Returns sensor detections
%    allData = check_checkv2 returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = check_checkv2 optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.9 (R2020b) and Automated Driving Toolbox 3.2 (R2020b).
% Generated on: 14-Nov-2024 20:19:36

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    isValidTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = radarDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [3.7 0], ...
    'MaxRange', 200, ...
    'HasFalseAlarms', false, ...
    'ActorProfiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [2.8 0.9], ...
    'Yaw', 35.0933307463494, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [2.8 -0.9], ...
    'Yaw', -38.237215059085, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([320 320],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
numSensors = 3;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario('StopTime', 8);

% Add all road segments
roadCenters = [-19.8 89.8 0;
    -20 59.8 0;
    -19.6 20.3 0;
    0.6 -0.4 0;
    20 -0.1 0;
    39.3 -0.1 0;
    60.2 30.2 0;
    60.4 70.2 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [-40.5 59.9 0;
    -27.3 59.9 0;
    -6.6 59.9 0;
    0.2 59.9 0];
road(scenario, roadCenters, 'Name', 'Road1');

roadCenters = [-35.7 16.8 0;
    1.8 17.3 0];
road(scenario, roadCenters, 'Name', 'Road2');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-22.6 88.7 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-22.6 88.7 0;
    -22.3 78.1 0;
    -21.9 63.5 0;
    -21.5 47.5 0;
    -20.6 30.3 0;
    -17.1 14.7 0;
    -12.8 6 0;
    -7.2 1 0;
    0.4 -1.5 0;
    13.5 -1.7 0;
    28.9 -0.5 0;
    44.9 2.3 0;
    55.4 14.5 0;
    58.3 28.2 0;
    60.2 53 0;
    59.2 70.5 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [-37.9 60.6 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Truck');
waypoints = [-37.9 60.6 0;
    -28.8 61.7 0;
    -22.1 61.7 0;
    -20.9 54.1 0;
    -20.9 43.7 0;
    -20.4 33.2 0;
    -20 19.8 0;
    -17.1 16.5 0;
    -7.5 16.5 0;
    -2 16.9 0;
    1.3 18.6 0];
speed = [30;30;30;30;30;30;30;30;30;30;30];
trajectory(truck, waypoints, speed);

car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-35.1 17.7 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Car1');
waypoints = [-35.1 17.7 0;
    -29.1 17.4 0;
    -24 16.8 0;
    -18.3 16.2 0;
    -13.8 10.2 0;
    -10.4 2.2 0;
    -6.4 0 0;
    1.9 -0.6 0;
    16.3 -0.6 0;
    27.6 -0.6 0;
    35.6 0.9 0;
    45.8 2.8 0;
    52.2 11.3 0;
    61.1 34 0;
    61.5 44.6 0;
    62.4 68.4 0;
    62.4 69.2 0];
speed = [20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20;20];
trajectory(car1, waypoints, speed);

actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-21.9 12.8 0], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Bicycle');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-24.6 55.9 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Pedestrian');

